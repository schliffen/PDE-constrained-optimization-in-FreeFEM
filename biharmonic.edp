//
// Biharmonic PDE with Morley polynomials
//
// ************* loads
 load "Morley"
 load "medit"

//************* constants
 verbosity=1;
 int iter=5;
 real beta=.2;
 real obj,mobj=0;

// ************ functions
//*************************** Defining Collocation points
 //===================================================
//            Creating the sparce grid
//==================================================
func real[int] CCSG(real a, real b, int order)
{
real[int]  r(2);
real[int,int] w(order,1),v(order,1);
// vec w = vec(order);
// vec x = vec(order);
cout<<"-------------------------"<<endl;
cout<<a<<","<<b<<","<<order<<endl;
  r[0] = a;
  r[1] = b;
  int i;
  int j;

  real pi = 3.141592653589793;
  real theta;

  if ( order < 1 )
  {
    cout << "\n";
    cout << "  CLENSHAW_CURTIS_COMPUTE - Fatal error!\n";
    cout << "  Illegal value of ORDER = " << order << "\n";
    exit ( 1 );
  }
  else if ( order == 1 )
  {
    v(0,0) = 0.0;
    w(0,0) = 2.0;
  }
  else
  {
    for ( i = 0; i < order; i++ )
    {
      real ii =i;
      v(i,0) =  cos ( ( order - 1 - ii ) * pi / ( order - 1));
    }
    v(0,0) = -1.0;
    if ( ( order % 2 ) == 1 )
    {
      v((order-1)/2,0) = 0.0;
    }
    v(order-1,0) = +1.0;

    for ( i = 0; i < order; i++ )
    {
      theta = ( i ) * pi / ( order - 1 );
      w(i,0) = 1.0;
      for ( j = 1; j <= ( order - 1 ) / 2; j++ )
      {
        if ( 2 * j == ( order - 1 ) )
        {
         real b = 1.0;
        }
        else
        {
         real  b = 2.0;
        }
        real jj=j;
         w(i,0) = w(i,0) - b *  cos ( 2.0 * ( jj ) * theta )
           / ( 4 * jj * jj - 1 );
      }
    }
    w(0,0) = w(0,0) / ( order - 1 );
    for ( i = 1; i < order - 1; i++ )
    {
      w(i,0) = 2.0 * w(i,0) / ( order - 1 );
    }
    w(order-1,0) = w(order-1,0) / ( order - 1 );
  }
//scaling
for (int i = 0; i < order; i++ )
  {
    v(i,0) = ( ( a + b ) + ( b - a ) * v(i,0) ) / 2.0;
  }
  for (int i = 0; i < order; i++ )
  {
    w(i,0) = ( b - a ) * w(i,0) / 2.0;
  }
//
real[int,int] ans(order,2); 
ans(:,0)=v(:,0);ans(:,1)=w(:,0);
cout<<"the ans matrix:  "<<ans.m<<" * "<<ans.n<<endl;
return ans;
}
//========================================================
// defining sparce grid order and testing
int order=5; real a=-1,b=1;
real[int,int]  yy(order,2);
yy =1/(b-a)* CCSG(a,b,order);
// *********** mesh and domain
 mesh Th=square(20,25,[x-0.5,y-0.5]);

// *********** FEM spaces
 fespace Vh(Th, P2Morley);
 fespace Uh(Th, P2);
 fespace Lh(Th, P1);
 Lh cont,vh;
 Uh sol,mcont,vcont, mu,vu,mp,vp;
 Vh [u,ux,uy], [v,vx,vy],[p,px,py];//ont,contx,conty];
// scont,su,sp;

//+2.0*dxy(u)*dxy(v)
// ***************** defined macro
 macro lap2(u,v) (dxx(u)*dxx(v)+dyy(u)*dyy(v)) // EOM

// **************** problem definitions
// ***** primal
int i=0;
cont[]=1;
plot(cont,cmm="the control before iterations");
//------------------------------------------------
for (int j=0;j<order;j++){
// ********************************** small functions
 func rhs = exp(yy(j,0))*(x+y);
 func yd  = .5*((x-.5)^2+(y-.5)^2<.01);
// func yd  = -.5*(x>.5)+.5*(x<.5);
// for loop for iteration of stochastic parameters -----------------
while(i<iter){
problem biprim([u,ux,uy], [v,vx,vy] )=  int2d(Th)(.01*exp(1+yy(j,0))*lap2(u,v))
                                     + int2d(Th)(u*v)
                                     - int2d(Th)(cont*v)
                                     - int2d(Th)(rhs*v)
                                     + on(1,2,3,4, u=0.0,ux=0.0,uy=0.0);
// *** adjoint
biprim;
// Introduction for using the adjoint section:
// In the example 1 that J = 1/2||u-ud||^2 + ...
// we set:  int2d(Th)((u-ud)*v) at right hand side
//----------------------------------
//
// In the other example with J = 1/2||delta u||^2 + ...
// alpha = (dxx(u)+dyy(u))
// we set: int2d(Th)(alpha*(delta u* nabla v))
//-----------------------------------
//
// In the third example that J = 1/2||nabla u||^2 + ... 
// beta = (dx(u) + dy(u))
// we set: int2d(Th)(beta*(nabla u* nabla v))
//
//                        ***************
problem biadj([p,px,py],[v,vx,vy])=int2d(Th)(0.01*exp(1+yy(j,0))*lap2(p,v))
                                     + int2d(Th)(p*v)
                                     + int2d(Th)((u-yd)*v)
                                     + on(1,2,3,4, p=0.0,px=0.0,py=0.0);
biadj;
// *** the control equation     
problem control(cont,vh) = int2d(Th)( beta*cont*vh) + int2d(Th)(p*vh); 
//
control;
// cout<<"the iterative computed control: "<<cont<<endl;
// plot(cont,cmm="the control at iterations");
/*Uh ydd=yd;
plot(ydd);*/
obj = .5*int2d(Th)((u-yd)^2)+.5*beta*int2d(Th)(cont^2);
cout<<"The objective function at iteration i = "<<i<<"and realization j = "<<j<<" is: "<<obj<<endl;
i+=1;
}; // end of while loop
mobj = mobj + obj*yy(j,1);
mcont = mcont+cont*yy(j,1);
vcont = vcont+cont^2*yy(j,1);
mu = mu+u*yy(j,1);
vu = vu+u^2*yy(j,1);
mp = mp+p*yy(j,1);
vp = vp+p^2*yy(j,1);
i=0;
}; // end of for loop
// computing the objective function 
obj = mobj + .5*beta*int2d(Th)(cont^2)+.5*beta*int2d(Th)(cont^2);
cout<<" The objective function "<<obj<<endl;
//-------------------------------------------
vcont = vcont - mcont^2;
vu = vu - mu^2;
vp = vp - mp^2; 
plot(mcont,cmm="the final control");
plot(vcont,cmm="the variance of control");
plot(mu,cmm="the final state");
plot(vp,cmm="the variance state");
plot(mp,cmm="the final adjoint");
plot(vp,cmm="the variance of adjoint");
//
// ----------------------[ Plotting with medit ]-------------
//
//medit("mm",Th,mcont,wait=true);